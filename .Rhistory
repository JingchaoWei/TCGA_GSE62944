rm(list = ls())
ls()
library(RMySQL)
install.packages("RMySQL")
library(RMySQL)
con <- dbConnect(MySQL(), host="127.0.0.1", port=3306, user="root", password="11111111")
dbSendQuery(con, "USE gse62944")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("GSE62944")
browseVignettes("GSE62944")
library(ExperimentHub)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("ExperimentHub", version = "3.8")
library(ExperimentHub)
eh = ExperimentHub()
str(eh)
str(eh)
eh = ExperimentHub()
query(eh , "GSE62944")
tcga_data <- eh[["EH1"]]
View(tcga_data)
str(eh)
View(eh)
head(phenoData(tcga_data)$CancerType)
query(eh , "GSE62944")
phenoData(tcga_data)$CancerType
unique(phenoData(tcga_data)$CancerType)
lgg_data <- tcga_data[, which(phenoData(tcga_data)$CancerType=="LGG")]
str(tcga_data)
View(lgg_data)
lgg_data@phenoData
str(lgg_data@phenoData)
phenoData(lgg_data)
phe <- lgg_data@phenoData
phe <- phenoData(lgg_data)
phe <- lgg_data@phenoData
phe
str(phe)
colnames(phe)
rownames(phe)
colnames(phe)
which(colnames(phe)=='idh1_mutation_found')
rownames(phe)
colnames(phe)
mut_idx <- which(phenoData(lgg_data)$idh1_mutation_found=="YES")
View(lgg_data)
colnames(lgg_data)
lgg_data@experimentData
lgg_data@assayData
lgg_data@experimentData
lgg_data$CancerType
mut_data <- exprs(lgg_data)[, mut_idx]
View(mut_data)
wt_idx <- which(phenoData(lgg_data)$idh1_mutation_found=="NO")
wt_data <- exprs(lgg_data)[, wt_idx]
View(wt_data)
View(mut_data)
countData <- cbind(mut_data, wt_data)
samples= c(colnames(mut_data), colnames(wt_data))
group =c(rep("mut",length(mut_idx)), rep("wt", length(wt_idx)))
coldata <- cbind(samples, group)
View(coldata)
colnames(coldata) <- c("sampleName", "Group")
colnames(coldata) <- c("sampleName", "Group")
View(coldata)
coldata[,"Group"] <- factor(coldata[,"Group"], c("wt","mut"))
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("DESeq2", version = "3.8")
library(DESeq2)
ddsMat <- DESeqDataSetFromMatrix(countData = countData,
colData = DataFrame(coldata),
design = ~ Group)
dds <- ddsMat
View(dds)
dds <- dds[ rowSums(counts(dds)) > 1, ]
dds <- DESeq(dds)
res <- results(dds)
summary(res)
View(res)
